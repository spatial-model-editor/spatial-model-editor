name: GUI/CLI Release Builds

on: push

jobs:
  linux-gui:
    name: Linux GUI/CLI
    runs-on: ubuntu-18.04
    defaults:
      run:
        shell: bash
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: 'true'
    - name: Set "latest" version number unless commit is version tagged
      if: startsWith(github.event.ref, 'refs/tags/1.') == false
      run: ./ci/set-latest-version.sh ${GITHUB_SHA}
    - name: Cache ccache
      uses: actions/cache@v2
      with:
        path: ~/.ccache
        key: ccache-${{ github.job }}-${{ runner.os }}-${{ github.sha }}
        restore-keys: ccache-${{ github.job }}-${{ runner.os }}-
    - uses: actions/setup-python@v2
      with:
        python-version: 3.9
    - name: Get static libs
      run: sudo ./ci/getlibs.sh linux
    - name: Install dependencies
      run: ./ci/linux-install.sh
    - name: Build script
      run: ./ci/linux-gui.sh
    - uses: actions/upload-artifact@v2
      with:
        path: ./artefacts/*

  macos-gui:
    name: MacOS GUI/CLI
    runs-on: macos-10.15
    defaults:
      run:
        shell: bash
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: 'true'
      - name: Set "latest" version number unless commit is version tagged
        if: startsWith(github.event.ref, 'refs/tags/1.') == false
        run: ./ci/set-latest-version.sh ${GITHUB_SHA}
      - name: Cache ccache
        uses: actions/cache@v2
        with:
          path: /Users/runner/Library/Caches/ccache
          key: ccache-${{ github.job }}-${{ runner.os }}-${{ github.sha }}
          restore-keys: ccache-${{ github.job }}-${{ runner.os }}-
      - uses: actions/setup-python@v2
        with:
          python-version: 3.9
      - name: Get static libs
        run: sudo ./ci/getlibs.sh osx
      - name: Build script
        run: ./ci/macos-gui.sh
      - uses: actions/upload-artifact@v2
        with:
          path: ./artefacts/*

  win64-gui:
    name: Windows 64-bit GUI/CLI
    runs-on: windows-2019
    defaults:
      run:
        shell: msys2 {0}
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: 'true'
      - uses: msys2/setup-msys2@v2
        with:
          msystem: MINGW64
          update: true
          install: mingw-w64-x86_64-gcc mingw-w64-x86_64-cmake mingw-w64-x86_64-ccache make
      - name: Set "latest" version number unless commit is version tagged
        if: startsWith(github.event.ref, 'refs/tags/1.') == false
        run: ./ci/set-latest-version.sh ${GITHUB_SHA}
      - name: Cache ccache
        uses: actions/cache@v2
        with:
          path: D:\a\_temp\msys\msys64\home\runneradmin\.ccache
          key: ccache-${{ github.job }}-${{ runner.os }}-${{ github.sha }}
          restore-keys: ccache-${{ github.job }}-${{ runner.os }}-
      - name: Get static libs
        run: ./ci/getlibs.sh win64
      - name: Build script
        run: ci/windows-gui.sh
      - uses: actions/upload-artifact@v2
        with:
          path: ./artefacts/*

  update-latest-tag:
    name: Update latest tag and remove existing latest release
    if: github.repository == 'spatial-model-editor/spatial-model-editor' && github.event_name == 'push' && github.ref == 'refs/heads/master'
    runs-on: ubuntu-20.04
    defaults:
      run:
        shell: bash
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: 'true'
          fetch-depth: 0
          ref: ${{ github.head_ref }}
      - run: git show-ref --tags
      - name: Delete any existing latest release
        run: gh release delete latest || echo "No latest release found to delete"
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
      - name: Move latest tag
        run: |
          git push origin :refs/tags/latest
          git tag -f latest
          git push origin latest
      - run: git show-ref --tags

  release:
    needs: [linux-gui, macos-gui, win64-gui, update-latest-tag]
    if: github.repository == 'spatial-model-editor/spatial-model-editor' && github.event_name == 'push' && github.ref == 'refs/heads/master'
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/download-artifact@v2
        with:
          name: artifact
          path: binaries
      - name: Upload binaries to latest pre-release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: binaries/*
          tag: latest
          overwrite: true
          file_glob: true
          prerelease: true
          body: "Latest pre-release version"
      - name: Upload binaries to tagged release
        if: startsWith(github.event.ref, 'refs/tags/')
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: binaries/*
          tag: ${{ github.ref }}
          overwrite: true
          file_glob: true
