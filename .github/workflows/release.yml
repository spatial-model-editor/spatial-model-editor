name: Release Builds
on:
  push:
    branches:
      - main
    tags:
      - "*.*.*"
  pull_request:
  workflow_dispatch:
concurrency:
  group: release-${{ github.ref }}
  cancel-in-progress: true
jobs:
  build:
    runs-on: ${{ matrix.platform.os }}
    strategy:
      fail-fast: false
      matrix:
        target: ["gui-cli", "wheels"]
        platform:
          - os: "ubuntu-22.04"
            shell: "bash"
          - os: "macos-13"
            shell: "bash"
          - os: "macos-14"
            shell: "bash"
          - os: "windows-2022"
            shell: "msys2 {0}"
    defaults:
      run:
        shell: ${{ matrix.platform.shell }}
    env:
      CIBUILDWHEEL_VERSION: "2.22"
      CIBW_MANYLINUX_X86_64_IMAGE: "ghcr.io/spatial-model-editor/manylinux_x86_64:2025.01.08"
      MACOS_CERTIFICATE: ${{ secrets.MACOS_CERTIFICATE }}
      MACOS_CERTIFICATE_PWD: ${{ secrets.MACOS_CERTIFICATE_PWD }}
      MACOS_CERTIFICATE_NAME: ${{ secrets.MACOS_CERTIFICATE_NAME }}
      MACOS_NOTARIZATION_APPLE_ID: ${{ secrets.MACOS_NOTARIZATION_APPLE_ID }}
      MACOS_NOTARIZATION_TEAM_ID: ${{ secrets.MACOS_NOTARIZATION_TEAM_ID }}
      MACOS_NOTARIZATION_PWD: ${{ secrets.MACOS_NOTARIZATION_PWD }}
      MACOS_KEYCHAIN_PWD: ${{ secrets.MACOS_KEYCHAIN_PWD }}
    name: "${{ matrix.target }} :: ${{ matrix.platform.os }}"
    steps:
      - uses: spatial-model-editor/setup-ci@2025.01.02
        with:
          sme_deps: '2025.01.08'
          cache_id: ${{ matrix.target }}
      - uses: actions/checkout@v4
        with:
          submodules: 'recursive'
      - name: Set "latest" version number unless commit is tagged
        if: startsWith(github.event.ref, 'refs/tags/') == false
        run: ./ci/set-latest-version.sh ${GITHUB_SHA}
      - run: ./ci/${{ matrix.target }}-${{ runner.os }}.sh
      - uses: actions/upload-artifact@v4
        with:
          name: artifacts-${{ matrix.target }}-${{ matrix.platform.os }}
          path: ./artifacts/*
  sdist:
    name: PyPI source distribution
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - run: pipx run build --sdist --outdir ./artifacts/dist
      - uses: actions/upload-artifact@v4
        with:
          name: artifacts-sdist
          path: ./artifacts/*
  release:
    needs: [build, sdist]
    if: github.repository == 'spatial-model-editor/spatial-model-editor' && github.event_name == 'push' && (startsWith(github.event.ref, 'refs/tags/') || github.ref == 'refs/heads/main')
    runs-on: ubuntu-latest
    environment: release
    permissions:
      id-token: write
      contents: write
    steps:
      - uses: actions/download-artifact@v4
        with:
          pattern: artifacts-*
          merge-multiple: true
          path: artifacts
      # if this is an untagged commit to main: add a "0.0.0" version wheel to github latest release for readthedocs to use
      - run: cp artifacts/dist/sme-*-cp312-cp312-manylinux_2_28_x86_64.whl artifacts/binaries/sme-0.0.0-cp312-cp312-manylinux_2_28_x86_64.whl
        if: github.ref == 'refs/heads/main'
      - name: Upload binaries to latest pre-release
        # if this is an untagged commit to main: upload binaries to github latest release
        if: github.ref == 'refs/heads/main'
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: artifacts/binaries/*
          tag: latest
          overwrite: true
          file_glob: true
          prerelease: true
      - name: Upload binaries to tagged release
        # if this a tagged commit, upload binaries to github release for this tag
        if: startsWith(github.event.ref, 'refs/tags/')
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: artifacts/binaries/*
          tag: ${{ github.ref }}
          overwrite: true
          file_glob: true
      - uses: pypa/gh-action-pypi-publish@release/v1
        # if this is a tagged commit, upload pypi wheels
        if: startsWith(github.event.ref, 'refs/tags/')
        with:
          packages-dir: ./artifacts/dist/
          verbose: true
